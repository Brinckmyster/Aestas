# .github/workflows/static.yml
# Deploy Academic Allies to GitHub Pages, with secrets support
name: Deploy Academic Allies to GitHub Pages
on:
  push:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Add secrets as environment variables here for ALL steps (jobs-level)
      # Github Actions injects values from the Secrets section
      SUPPORT_TIER_EMAILS: ${{ secrets.SUPPORT_TIER_EMAILS }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
      FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      # Add more secrets as needed
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies if package.json exists
        run: |
          if [ -f "package.json" ]; then
            npm ci
          fi
      - name: Build site (skip if not needed)
        run: |
          if [ -f "package.json" ] && [ -f "package-lock.json" ]; then
            npm run build || echo "No build step"
          else
            echo "No build step"
          fi
      - name: Inject Firebase config into header
        run: |
          echo "Injecting Firebase configuration..."
          if [ -f "modular/shared-header.html" ]; then
            # Create firebase config for injection
            cat > firebase-config.js << EOF
          const firebaseConfig = {
            apiKey: "$FIREBASE_API_KEY",
            authDomain: "$FIREBASE_PROJECT_ID.firebaseapp.com",
            projectId: "$FIREBASE_PROJECT_ID",
            storageBucket: "$FIREBASE_PROJECT_ID.appspot.com",
            messagingSenderId: "$(echo $FIREBASE_CONFIG | jq -r '.messagingSenderId' || echo '')",
            appId: "$(echo $FIREBASE_CONFIG | jq -r '.appId' || echo '')"
          };
          EOF
            # Inject Firebase config
            sed -i 's|{{FIREBASE_CONFIG}}|'"$(cat firebase-config.js)"'|g' modular/shared-header.html
            # Inject Google OAuth secret
            sed -i "s/{{GOOGLE_CLIENT_SECRET}}/$GOOGLE_CLIENT_SECRET/g" modular/shared-header.html
            echo "Configuration injection completed."
          else
            echo "shared-header.html not found, skipping configuration injection."
          fi
        env:
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
