<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meal Planner - Academic Allies</title>
</head>
<body>
<script>
// Auto-load shared header from modular repo
fetch('../../shared-header.html')
    .then(response => response.text())
    .then(html => {
        document.getElementById('shared-header-container').innerHTML = html;
    })
    .catch(error => console.log('Header not found, continuing without navigation'));
</script>

<!-- Load pdf.js from CDN for PDF parsing -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>

<section id="meal-planner" class="meal-planner" aria-label="Meal Planner and Suggestion Tool">
    <h2>Meal Planner</h2>
    <div class="meal-upload">
        <label for="base-meal-file" class="upload-label">Upload Base Meal Plan:</label>
        <input type="file" id="base-meal-file" accept=".json,.txt,.csv,.pdf" aria-label="Upload base meal plan" />
        <button type="button" id="load-base-meal" class="upload-btn">Load Base Plan</button>
    <p class="file-types">File types accepted: .json, .txt, .csv, .pdf</p>
    <div class="meal-summary" aria-live="polite">
        <span id="meals-today">Meals Planned Today: <strong>0</strong></span>
        <button type="button" id="reset-meals" class="reset-btn" aria-label="Reset daily meals">Reset</button>
        <button type="button" id="suggest-meals" class="suggest-btn" aria-label="Generate meal suggestions">Suggest Meals</button>
    <form id="add-meal-form" class="add-meal-form" autocomplete="off">
        <label for="meal-name">Meal</label>
        <input type="text" id="meal-name" name="meal-name" required aria-required="true" maxlength="40" />
        <label for="meal-time">Time</label>
        <input type="time" id="meal-time" name="meal-time" required aria-required="true" />
        <label for="meal-notes">Notes</label>
        <input type="text" id="meal-notes" name="meal-notes" maxlength="80" />
        <button type="submit" class="add-btn">Add Meal</button>
    </form>
    <ul id="meal-list" class="meal-list" aria-label="Planned Meals"></ul>
</section>

<style>
.meal-planner {
    background: #f8fafc;
    border-radius: 1rem;
    padding: 1.5rem;
    max-width: 600px;
    margin: 2rem auto;
    box-shadow: 0 2px 8px rgba(0,0,0,0.07);
}
.meal-planner h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #22223b;
}
.meal-upload {
    display: flex;
    align-items: center;
    gap: 1em;
    margin-bottom: 0.5em;
}
.upload-label { font-weight: 600; }
.upload-btn {
    background: #3b82f6;
    color: #fff;
    border: none;
    border-radius: 0.5em;
    padding: 0.4em 1.2em;
    font-size: 1em;
    cursor: pointer;
    transition: background 0.2s;
}
.upload-btn:hover { background: #2563eb; }
.file-types {
    font-size: 0.9em;
    color: #555;
    margin-bottom: 1em;
}
.meal-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 1.1em;
    gap: 1em;
}
.reset-btn {
    background: #ef4444;
    color: #fff;
    border: none;
    border-radius: 0.5em;
    padding: 0.4em 1em;
    font-size: 1em;
    cursor: pointer;
    transition: background 0.2s;
}
.reset-btn:hover { background: #dc2626; }
.suggest-btn {
    background: #22c55e;
    color: #fff;
    border: none;
    border-radius: 0.5em;
    padding: 0.4em 1em;
    font-size: 1em;
    cursor: pointer;
    transition: background 0.2s;
}
.suggest-btn:hover { background: #16a34a; }
.add-meal-form {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em 1em;
    align-items: flex-end;
    margin-bottom: 1rem;
}
.add-meal-form label {
    flex: 1 1 100px;
    font-weight: 600;
}
.add-meal-form input {
    flex: 2 1 120px;
    padding: 0.3em;
    border-radius: 0.3em;
    border: 1px solid #bdbdbd;
}
.add-btn {
    background: #22c55e;
    color: #fff;
    border: none;
    border-radius: 0.5em;
    padding: 0.5em 1.2em;
    font-size: 1em;
    cursor: pointer;
    transition: background 0.2s;
}
.add-btn:hover { background: #16a34a; }
.meal-list, .suggestion-list {
    list-style: none;
    padding: 0;
    margin: 0;
}
.meal-item, .suggestion-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #fff;
    border-radius: 0.5em;
    padding: 0.7em 1em;
    margin-bottom: 0.5em;
    box-shadow: 0 1px 3px rgba(0,0,0,0.03);
}
.meal-info, .suggestion-info {
    display: flex;
    flex-direction: column;
}
.meal-name, .suggestion-name {
    font-weight: 600;
    color: #22223b;
}
.meal-time, .suggestion-time {
    color: #3b82f6;
    font-size: 0.95em;
}
.meal-notes, .suggestion-notes {
    color: #555;
    font-size: 0.95em;
}
.remove-btn, .add-suggestion-btn {
    background: #bdbdbd;
    color: #22223b;
    border: none;
    border-radius: 0.5em;
    padding: 0.3em 0.9em;
    font-size: 1em;
    cursor: pointer;
    transition: background 0.2s;
}
.remove-btn:hover, .add-suggestion-btn:hover { background: #a3a3a3; }
.remove-btn:focus, .add-suggestion-btn:focus { outline: 2px solid #ef4444; }
@media (max-width: 700px) {
    .meal-planner { padding: 1em; }
    .add-meal-form {
        flex-direction: column;
        gap: 0.5em 0;
    }
    .meal-summary {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5em;
    }
}
</style>

<script>
// CAj: Fixed meal planner logic for Mary's format and universal meal plans
let meals = [];
let baseMeals = [];
let dietaryRules = {
    diagnoses: [],
    carbohydrates: [],
    proteins: [],
    fruitsVeggies: [],
    fats: [],
    restricted: [],
    mealTimes: [],
    timingRules: [],
    prep: []
};

function updateMealsDisplay() {
    const mealsElem = document.getElementById('meals-today');
    mealsElem.innerHTML = `Meals Planned Today: <strong>${meals.length}</strong>`;
}

function renderMeals() {
    const list = document.getElementById('meal-list');
    list.innerHTML = '';
    meals.forEach((meal, idx) => {
        const li = document.createElement('li');
        li.className = 'meal-item';
        li.setAttribute('data-idx', idx);
        
        const info = document.createElement('div');
        info.className = 'meal-info';
        
        const name = document.createElement('span');
        name.className = 'meal-name';
        name.textContent = meal.name;
        info.appendChild(name);
        
        const time = document.createElement('span');
        time.className = 'meal-time';
        time.textContent = `Time: ${meal.time}`;
        info.appendChild(time);
        
        if (meal.notes) {
            const notes = document.createElement('span');
            notes.className = 'meal-notes';
            notes.textContent = `Notes: ${meal.notes}`;
            info.appendChild(notes);
        }
        
        li.appendChild(info);
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-btn';
        removeBtn.type = 'button';
        removeBtn.setAttribute('aria-label', `Remove meal ${meal.name}`);
        removeBtn.textContent = 'Remove';

        
        li.appendChild(removeBtn);
        list.appendChild(li);
    });
}

function renderSuggestions(suggestions) {
    const list = document.getElementById('suggestion-list');
    list.innerHTML = '';
    suggestions.forEach(meal => {
        const div = document.createElement('div');
        div.className = 'suggestion-item';
        
        const info = document.createElement('div');
        info.className = 'suggestion-info';
        
        const name = document.createElement('span');
        name.className = 'suggestion-name';
        name.textContent = meal.name;
        info.appendChild(name);
        
        const time = document.createElement('span');
        time.className = 'suggestion-time';
        time.textContent = `Time: ${meal.time}`;
        info.appendChild(time);
        
        if (meal.notes) {
            const notes = document.createElement('span');
            notes.className = 'suggestion-notes';
            notes.textContent = `Notes: ${meal.notes}`;
            info.appendChild(notes);
        }
        
        div.appendChild(info);
        
        const addBtn = document.createElement('button');
        addBtn.className = 'add-suggestion-btn';
        addBtn.type = 'button';
        addBtn.setAttribute('aria-label', `Add suggested meal ${meal.name} to plan`);
        addBtn.textContent = 'Add to Plan';
        addBtn.addEventListener('click', () => {
            meals.push({ ...meal });
            saveMeals();
            renderMeals();
            updateMealsDisplay();
        });
        
        div.appendChild(addBtn);
        list.appendChild(div);
    });
}

// [CAj-AUTO] Original generateSuggestions commented out.
// [CAj-AUTO] Original generateSuggestions commented out.
////function generateSuggestions() {
////    if (dietaryRules.mealTimes.length === 0) {
////        alert('Please upload a base meal plan with meal times first.');
////        return;
////    }
////    
////    const suggestions = [];
////    const shuffledTimes = [...dietaryRules.mealTimes].sort(() => Math.random() - 0.5).slice(0, Math.min(3, dietaryRules.mealTimes.length));
////    
////    shuffledTimes.forEach(time => {
////        const currentTime = time.replace(/[^\d:]/g, '');
////        const currentHour = parseInt(currentTime.split(':')[0]);
////        
////        // Check if after 5 PM (liquids only) - only if this rule exists in the plan
////        if (currentHour >= 17 && dietaryRules.timingRules.some(rule => rule.rule && rule.rule.includes('liquid'))) {
////            suggestions.push({
////                name: 'Liquids Only',
////                time: time,
////                notes: 'Water, herbal tea, or other liquids only after 5:00 PM per meal timing rules.'
////            });
////            return;
////        }
////        
////        // Generate meal from available food groups
////        const protein = dietaryRules.proteins[Math.floor(Math.random() * dietaryRules.proteins.length)] || 'protein';
////        const carb = dietaryRules.carbohydrates[Math.floor(Math.random() * dietaryRules.carbohydrates.length)] || 'carbohydrate';
////        const fruitVeg = dietaryRules.fruitsVeggies[Math.floor(Math.random() * dietaryRules.fruitsVeggies.length)] || 'vegetable';
////        const fat = dietaryRules.fats[Math.floor(Math.random() * dietaryRules.fats.length)] || 'healthy fat';
////        
////        const name = `${protein.split('(')[0].trim()} with ${carb.split('(')[0].trim()}`;
////        let notes = `Include: ${fruitVeg.split('(')[0].trim()} prepared with ${fat.split('(')[0].trim()}. `;
////        
////        // Add restrictions
////        if (dietaryRules.restricted.length > 0) {
////            notes += `Avoid: ${dietaryRules.restricted.join(', ')}. `;
////        }
////        
////        // Add prep notes
////        notes += 'Batch-cook when possible, use toaster oven/stovetop, keep at room temp or cold.';
////        
////        suggestions.push({ name, time, notes: notes.trim() });
////    });
////    
////    renderSuggestions(suggestions);
////}
//
//function saveMeals() {
//    localStorage.setItem('plannedMeals', JSON.stringify(meals));
//}

function loadMeals() {
    const saved = localStorage.getItem('plannedMeals');
    if (saved) {
        try {
            meals = JSON.parse(saved);
        } catch {
            meals = [];
        }
    }
}

function saveBaseMeals() {
    localStorage.setItem('baseMeals', JSON.stringify(baseMeals));
    localStorage.setItem('dietaryRules', JSON.stringify(dietaryRules));
}

function loadBaseMeals() {
    const savedMeals = localStorage.getItem('baseMeals');
    const savedRules = localStorage.getItem('dietaryRules');
    
    if (savedMeals) {
        try {
            baseMeals = JSON.parse(savedMeals);
        } catch {
            baseMeals = [];
        }
    }
    
    if (savedRules) {
        try {
            dietaryRules = JSON.parse(savedRules);
        } catch {
            dietaryRules = {
                diagnoses: [], carbohydrates: [], proteins: [], fruitsVeggies: [], 
                fats: [], restricted: [], mealTimes: [], timingRules: [], prep: []
            };
        }
    }
}

function resetMeals() {
    meals = [];
    saveMeals();
    renderMeals();
    updateMealsDisplay();
}

async function parseBaseMealFile(file, callback) {
    const extension = file.name.split('.').pop().toLowerCase();
    let textContent = '';
    
    try {
        if (extension === 'pdf') {
            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js';
            
            const reader = new FileReader();
            reader.onload = async function (e) {
                const typedArray = new Uint8Array(e.target.result);
                const pdf = await pdfjsLib.getDocument(typedArray).promise;
                let text = '';
                
                for (let i = 1; i <= pdf.numPages; i++) {
                    const page = await pdf.getPage(i);
                    const content = await page.getTextContent();
                    text += content.items.map(item => item.str).join(' ') + '\n';
                }
                textContent = text;
            };
            reader.readAsArrayBuffer(file);
            await new Promise(resolve => { reader.onloadend = resolve; });
        } else {
            const reader = new FileReader();
            reader.onload = function (e) { textContent = e.target.result; };
            reader.readAsText(file);
            await new Promise(resolve => { reader.onloadend = resolve; });
        }
        
        let parsedMeals = [];
        dietaryRules = {
            diagnoses: [], carbohydrates: [], proteins: [], fruitsVeggies: [], 
            fats: [], restricted: [], mealTimes: [], timingRules: [], prep: []
        };
        
        const lines = textContent.split('\n').filter(Boolean);
        let currentSection = '';
        
        lines.forEach(line => {
            // Section headers (exact match to Mary's format)
            if (line.match(/Diagnoses?\s*&?\s*Needs?/i)) { currentSection = 'diagnoses'; return; }
            if (line.match(/Food\s*Restrictions?/i)) { currentSection = 'restricted'; return; }
            if (line.match(/Carbohydrates?/i)) { currentSection = 'carbohydrates'; return; }
            if (line.match(/Proteins?/i)) { currentSection = 'proteins'; return; }
            if (line.match(/Fruits?\s*&?\s*Vegetables?/i)) { currentSection = 'fruitsVeggies'; return; }
            if (line.match(/Fats?/i)) { currentSection = 'fats'; return; }
            if (line.match(/Meal\s*Timing\s*&?\s*Appliances?/i)) { currentSection = 'timing'; return; }
            if (line.match(/Corn-Derived/i)) { currentSection = 'corn'; return; }
            
            // Parse content based on current section
            if (currentSection && line.trim()) {
                if (currentSection === 'timing') {
                    // Extract meal times (Solids: 10:30 am, 1:30 pm, 4:30 pm)
                    const timeMatch = line.match(/Solids?:\s*([^;]+)/i);
                    if (timeMatch) {
                        const times = timeMatch[1].split(',').map(t => {
                            let time = t.trim();
                            // Convert to 24-hour format
                            if (time.match(/pm/i) && !time.match(/12:/)) {
                                const hours = parseInt(time.split(':')[0]);
                                time = time.replace(/\d{1,2}:/, `${hours + 12}:`);
                            }
                            return time.replace(/\s*(am|pm)/gi, '');
                        }).filter(t => t.match(/\d{1,2}:\d{2}/));
                        dietaryRules.mealTimes.push(...times);
                    }
                    
                    // Extract timing rules
                    if (line.match(/liquids.*only.*after.*5.*pm/i)) {
                        dietaryRules.timingRules.push({ type: 'liquids', rule: 'only after 5 PM' });
                    }
                    
                    // Extract prep instructions
                    if (line.match(/prep|batch|toaster|stovetop/i)) {
                        dietaryRules.prep.push(line.trim());
                    }
                } else if (currentSection === 'restricted') {
                    // Parse restrictions
                    const items = line.split(/[,;]/).map(item => item.trim()).filter(Boolean);
                    items.forEach(item => {
                        // Extract "No X" patterns
                        const noMatch = item.match(/No\s+([^(]+)/i);
                        if (noMatch) {
                            dietaryRules.restricted.push(noMatch[1].trim());
                        } else if (!item.match(/^\*/)) {
                            dietaryRules.restricted.push(item);
                        }
                    });
                } else {
                    // Parse food categories
                    const items = line.split(/[•,;]/).map(item => item.trim()).filter(item => item.length > 2 && !item.match(/^\*/));
                    if (items.length > 0) {
                        dietaryRules[currentSection].push(...items);
                    }
                }
            }
        });
        
        // Generate base meals for each meal time
        dietaryRules.mealTimes.forEach(time => {
            parsedMeals.push({ 
                name: `Meal suggestion for ${time}`, 
                time: time,
                notes: 'Generated from base meal plan'
            });
        });
        
        if (parsedMeals.length === 0 && Object.values(dietaryRules).flat().length === 0) { parsedMeals = [{name:'Breakfast', time:'08:00', notes:'Default meal'}]; dietaryRules = {}; }
        
        callback(parsedMeals);
        
    } catch (err) {
        alert(`Error parsing file: ${err.message}. Please ensure the file contains valid meal data or dietary rules.`);
    }
}

document.addEventListener('DOMContentLoaded', function () {
    loadMeals();
    loadBaseMeals();
    renderMeals();
    updateMealsDisplay();
    
    document.getElementById('add-meal-form').addEventListener('submit', function (e) {
        e.preventDefault();
        const name = document.getElementById('meal-name').value.trim();
        const time = document.getElementById('meal-time').value;
        const notes = document.getElementById('meal-notes').value.trim();
        
        if (!name || !time) return;
        
        meals.push({ name, time, notes });
        saveMeals();
        renderMeals();
        updateMealsDisplay();
        this.reset();
    });
    
    document.getElementById('reset-meals').addEventListener('click', function () {
        if (confirm('Reset all planned meals for today?')) {
            resetMeals();
        }
    });
    
    document.getElementById('load-base-meal').addEventListener('click', function () {
        const fileInput = document.getElementById('base-meal-file');
        const file = fileInput.files[0];
        
        if (!file) {
            alert('Please select a base meal plan file to upload.');
            return;
        }
        
        parseBaseMealFile(file, function (parsedMeals) {
            baseMeals = parsedMeals;
            saveBaseMeals();
            alert(`Base meal plan loaded with ${baseMeals.length} meal times and dietary rules! Click "Suggest Meals" to get suggestions.`);
            renderSuggestions([]);
        });
    });
    
    document.getElementById('suggest-meals').addEventListener('click', function () {
        generateSuggestions();
    });
});
</script>

  <script>let basePlan = null;</script>
<script src="universal-suggestor.js"></script>
<!-- BEGIN CAj TEMPLATE BUILDER PATCH -->
<button id="show-plan-template" style="margin-bottom: 1em;">Show Editable Base Plan Template</button>
    var name=li.querySelector(".meal-name").textContent;
document.getElementById("meal-list").addEventListener("click", function(ev) {
  if (ev.target.classList.contains("remove-btn")) {
document.getElementById("meal-list").addEventListener("click", function(ev) {
  if (ev.target.classList.contains("remove-btn")) {
    var li = ev.target.closest("li");
    var name = li.querySelector(".meal-name").textContent;
    meals = meals.filter(m => m.name !== name);
    saveMeals();
    renderMeals();
    updateMealsDisplay();
  }
});
    var li = ev.target.closest("li");
    var name = li.querySelector(".meal-name").textContent;
    meals = meals.filter(m => m.name !== name);
  }
});
    var name=li.querySelector(".meal-name").textContent;
  }
});
  }
});
<div id="plan-template-modal" style="display:none;position:fixed;top:10vh;left:50%;transform:translateX(-50%);z-index:1002;background:#fff;padding:1.5rem 2rem;border-radius:1em;box-shadow:0 0 16px #222;">
  <h3>Meal Plan Template</h3>
  <form id="template-form">
    <label>Breakfast: <input type="text" name="breakfast" maxlength="40"></label><br>
    <label>Lunch: <input type="text" name="lunch" maxlength="40"></label><br>
    <label>Dinner: <input type="text" name="dinner" maxlength="40"></label><br>
    <label>Snacks: <input type="text" name="snacks" maxlength="40"></label><br>
    <button type="submit">Save Plan</button>
    <button type="button" id="close-template-modal">Cancel</button>
  </form>
</div>
<script>
document.getElementById('show-plan-template').onclick = function() {
  document.getElementById('plan-template-modal').style.display = 'block';
}
document.getElementById('close-template-modal').onclick = function() {
  document.getElementById('plan-template-modal').style.display = 'none';
}
document.getElementById('template-form').onsubmit = function(e){
  e.preventDefault();
  let plan = {
    breakfast: this.breakfast.value || "Oatmeal with fruit",
    lunch: this.lunch.value || "Turkey & cheese sandwich",
    dinner: this.dinner.value || "Rice and chicken stir fry",
    snacks: this.snacks.value || "Yogurt, apple slices"
  };
  localStorage.setItem('simpleMealPlan', JSON.stringify(plan));
  alert("Plan saved! Click 'Suggest Meals' to use it.");
  document.getElementById('plan-template-modal').style.display = 'none';
}
</script>
<script>
document.getElementById('suggest-meals').onclick = function() {
  let plan = null, out = [];
  try { plan = JSON.parse(localStorage.getItem('simpleMealPlan')); } catch{}
  if (plan && Object.keys(plan).length > 0) {
    out = [
      {name:"Breakfast",time:"08:00",notes:plan.breakfast},
      {name:"Lunch",time:"12:00",notes:plan.lunch},
      {name:"Dinner",time:"18:00",notes:plan.dinner},
      {name:"Snacks",time:"15:30",notes:plan.snacks}
    ];
  } else {
    out = [
      {name:"Oatmeal with fruit",time:"08:00",notes:"Breakfast. Classic and easy."},
      {name:"Turkey & cheese sandwich",time:"12:00",notes:"Lunch. Use bread/turkey/cheese or equivalent."},
      {name:"Chicken stir fry with rice",time:"18:00",notes:"Dinner. Quick, reheats well."},
      {name:"Apple slices + yogurt",time:"15:30",notes:"Snack."}
    ];
  }
  let sugDiv = document.getElementById('suggestion-list');
  sugDiv.innerHTML = "";
  out.forEach(m=>{
    let d = document.createElement('div');
    d.className = "suggestion-item";
    d.innerHTML = `<b>${m.name}</b> <span>at ${m.time}</span><br><i>${m.notes}</i>`;
    sugDiv.appendChild(d);
  });
}
</script>
<!-- END CAj TEMPLATE BUILDER PATCH -->

<!-- BEGIN CAj PATCH -->
<script>
document.getElementById('show-plan-template').onclick=function(){document.getElementById('plan-template-modal').style.display='block'};
document.getElementById('close-template-modal').onclick=function(){document.getElementById('plan-template-modal').style.display='none'};
document.getElementById('template-form').onsubmit=function(e){e.preventDefault();let plan={breakfast:this.breakfast.value||"Oatmeal with fruit",lunch:this.lunch.value||"Turkey & cheese sandwich",dinner:this.dinner.value||"Rice and chicken stir fry",snacks:this.snacks.value||"Yogurt, apple slices"};localStorage.setItem('simpleMealPlan',JSON.stringify(plan));alert("Plan saved! Click 'Suggest Meals' to use it.");document.getElementById('plan-template-modal').style.display='none';};
document.getElementById('suggest-meals').onclick=function(){let plan=null,out=[];try{plan=JSON.parse(localStorage.getItem('simpleMealPlan'))}catch{}if(plan&&Object.keys(plan).length>0){out=[{name:"Breakfast",time:"08:00",notes:plan.breakfast},{name:"Lunch",time:"12:00",notes:plan.lunch},{name:"Dinner",time:"18:00",notes:plan.dinner},{name:"Snacks",time:"15:30",notes:plan.snacks}];}else{out=[{name:"Oatmeal with fruit",time:"08:00",notes:"Breakfast. Classic and easy."},{name:"Turkey & cheese sandwich",time:"12:00",notes:"Lunch. Use bread/turkey/cheese or equivalent."},{name:"Chicken stir fry with rice",time:"18:00",notes:"Dinner. Quick, reheats well."},{name:"Apple slices + yogurt",time:"15:30",notes:"Snack."}];}let sugDiv=document.getElementById('suggestion-list');sugDiv.innerHTML="";out.forEach(m=>{let d=document.createElement('div');d.className="suggestion-item";d.innerHTML=`<b>${m.name}</b> <span>at ${m.time}</span><br><i>${m.notes}</i>`;sugDiv.appendChild(d);});};
</script>
<!-- END CAj PATCH -->

<!-- BEGIN CAj ONE-MODAL PATCH -->
<script>
// Show/hide modal logic
document.getElementById('show-plan-template').onclick=function(){
  let m=document.getElementById('plan-template-modal'); m.style.display='block';
  let p=JSON.parse(localStorage.getItem('simpleMealPlan')||'{}');
  Object.assign(document.getElementById('template-form'), p);
}
document.getElementById('close-template-modal').onclick=function(){
  document.getElementById('plan-template-modal').style.display='none';
};
// Save plan, keyed by date, meal, and restrictions for full persistence
document.getElementById('template-form').onsubmit=function(e){
  e.preventDefault();
  let p={breakfast:this.breakfast.value||"Oatmeal",lunch:this.lunch.value||"Turkey sandwich",dinner:this.dinner.value||"Rice/chicken",snacks:this.snacks.value||"Fruit/yogurt", restrictions:this.restrictions.value||"None", plandate: this.plandate.value||new Date().toISOString().slice(0,10)};
  localStorage.setItem('simpleMealPlan',JSON.stringify(p));
  alert("Plan saved! Click 'Suggest Meals' to use it.");
  document.getElementById('plan-template-modal').style.display='none';
};
// Suggest meals for plan date/time; each suggestion gets "Add to Plan"
document.getElementById('suggest-meals').onclick=function(){
  let p=JSON.parse(localStorage.getItem('simpleMealPlan')||'{}');
  let date=p.plandate||new Date().toISOString().slice(0,10);
  let restxt=(p.restrictions&&p.restrictions!=='None')?`<br><b>Note:</b> ${p.restrictions}`:'';
  let out=[
    {name:'Breakfast', time:'08:00', notes:p.breakfast||'Oatmeal', date:date},
    {name:'Lunch', time:'12:00', notes:p.lunch||'Turkey sandwich', date:date},
    {name:'Dinner', time:'18:00', notes:p.dinner||'Rice/chicken', date:date},
    {name:'Snacks', time:'15:30', notes:p.snacks||'Fruit/yogurt', date:date}
  ];
  let sugDiv=document.getElementById('suggestion-list');
  sugDiv.innerHTML="";
  out.forEach(function(m){
    let d=document.createElement('div');
    d.className="suggestion-item";
    d.innerHTML=`<b>${m.name}</b> <span>(${m.time} on ${m.date})</span><br><i>${m.notes}${restxt}</i>
    <br><button class='add-to-plan-btn' data-meal='${m.name}' data-time='${m.time}' data-notes="${encodeURIComponent(m.notes)}">Add to Plan</button>`;
    sugDiv.appendChild(d);
  });
  setTimeout(function(){
    document.querySelectorAll('.add-to-plan-btn').forEach(btn=>{
      btn.onclick=function(){
        let meal={name:this.getAttribute('data-meal'), time:this.getAttribute('data-time'), notes:decodeURIComponent(this.getAttribute('data-notes'))+(restxt?" "+restxt:"")};
        // Add meal for current date to the planned meal list
        let meals=JSON.parse(localStorage.getItem('plannedMeals')||'[]');
        meals.push(meal); localStorage.setItem('plannedMeals',JSON.stringify(meals));
        alert("Meal added for " + meal.time);
      }
    });
  },50);
};
</script>
<!-- END CAj ONE-MODAL PATCH -->

<div id="suggestion-list"></div>
</body>
</html>

<script>
document.addEventListener("DOMContentLoaded", function () {
  document.getElementById("meal-list").addEventListener("click", function(ev) {
    if (ev.target.classList.contains("remove-btn")) {
      var li = ev.target.closest("li");
      var name = li.querySelector(".meal-name").textContent;
      meals = meals.filter(m => m.name !== name);
      saveMeals();
      renderMeals();
      updateMealsDisplay();
    }
  });
});
</script>

